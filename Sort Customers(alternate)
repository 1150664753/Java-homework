import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.text.NumberFormat;
import java.util.*;
import static java.lang.Math.abs;
public class Main {
    public static void main(String[] args) {
        Bank bank = Bank.getBank();
        Customer customer;
        int curCustomer = 0;
        Scanner s = new Scanner(System.in);
        int t = s.nextInt();
        s.nextLine();
        // Create several customers and their accounts according to data
        while (t-- > 0) {
            String f = s.next();
            String l = s.next();
            s.nextLine();
            bank.addCustomer(f, l);
            customer = bank.getCustomer(curCustomer++);
            int numAccount = s.nextInt();
            s.nextLine();
            while (numAccount-- > 0) {
                String[] type = s.nextLine().split(" ");
                double balance;
                double interesOrProtect;
                if (type[0].trim().toUpperCase().equals("C")) {
                    balance = Double.parseDouble(type[1]);
                    if (type.length == 3) {
                        interesOrProtect = Double.parseDouble(type[2]);
                        customer.addAccount(new CheckingAccount(balance,
                                interesOrProtect));
                    } else {
                        customer.addAccount(new CheckingAccount(balance));
                    }
                } else if (type[0].trim().toUpperCase().equals("S")) {
                    balance = Double.parseDouble(type[1]);
                    interesOrProtect = Double.parseDouble(type[2]);
                    customer.addAccount(new SavingsAccount(balance,
                            interesOrProtect));
                }
            }
        }
        int nOPs = s.nextInt();
        s.nextLine();
        while (nOPs-- > 0) {
            String[] sOP = s.nextLine().split(" ");
            char op = sOP[0].charAt(0);
            int customerIndex = Integer.parseInt(sOP[1]);
            int accountIndex = Integer.parseInt(sOP[2]);
            double amount = Double.parseDouble(sOP[3]);
            switch (op) {
                case 'w':
                case 'W':
                    customer = bank.getCustomer(customerIndex);
                    try{
                        customer.getAccount(accountIndex).withdraw(amount);
                    }
                    catch (OverdraftException ode){
                        System.out.println( customer + " withdraw " + amount + ", " + ode.getMessage() + ": " + ode.getDeficit());
                    }
                    break;
                case 'd':
                case 'D':
                    customer = bank.getCustomer(customerIndex);
                    customer.getAccount(accountIndex).deposit(amount);
                    break;
            }
        }
        // Generate a report
        CustomerReport cr = new CustomerReport();
        cr.generateReport();
    }
}
/* PRESET CODE END - NEVER TOUCH CODE ABOVE */
class Bank{
    public List<Customer> customers;
    private static Bank bank;
    private Bank(){
    }
    static public Bank getBank(){
        if(bank==null){
            bank=new Bank();
            bank.customers=new ArrayList<Customer>();
        }
        return bank;
    }
    public void addCustomer(String firstName, String lastName){
        customers.add(new Customer(firstName,lastName));
    }
    public Customer getCustomer(int index){
        return customers.get(index);
    }
    public int getNumOfCustomers(){
        return customers.size();
    }
    public void sortCustomers(Comparator<Customer> comparator){
        Collections.sort(customers,comparator);
    }
}
class NameComp implements Comparator<Customer>{
    @Override
    public int compare(Customer C1, Customer C2) {
        int Big=C1.getLastName().compareTo(C2.getLastName());
        if(Big!=0){
            return Big;
        }
        else{
            return C1.getFirstName().compareTo(C2.getFirstName());
        }
    }
}
class SavingComp implements Comparator<Customer>{
    @Override
    public int compare(Customer C1, Customer C2) {
        if(!(C1.getAccount(0)instanceof SavingsAccount)){
            if(C2.getAccount(0)instanceof SavingsAccount){
                return -1;
            }
            else{
                return 0;
            }
        }
        else{
            if(C2.getAccount(0)instanceof SavingsAccount){
                SavingsAccount SA1 = (SavingsAccount)C1.getAccount(0);
                SavingsAccount SA2 = (SavingsAccount)C2.getAccount(0);
                if(abs(SA1.getBalance()-SA2.getBalance())<10e-6){
                    return 0;
                }
                else{
                    return SA1.getBalance()-SA2.getBalance()>0?1:-1;
                }
            }
            else{
                return 1;
            }
        }
    }
}
class CheckingComp implements Comparator<Customer>{
    @Override
    public int compare(Customer C1, Customer C2) {
        if(!(C1.getAccount(C1.getNumOfAccounts()-1)instanceof CheckingAccount)){
            if(C2.getAccount(C1.getNumOfAccounts()-1)instanceof CheckingAccount){
                return -1;
            }
            else{
                return 0;
            }
        }
        else{
            if(C2.getAccount(C2.getNumOfAccounts()-1)instanceof CheckingAccount){
                CheckingAccount CA1 = (CheckingAccount)C1.getAccount(C1.getNumOfAccounts()-1);
                CheckingAccount CA2 = (CheckingAccount)C2.getAccount(C2.getNumOfAccounts()-1);
                if(abs(CA1.getBalance()-CA2.getBalance())<10e-6){
                    return 0;
                }
                else{
                    return CA1.getBalance()-CA2.getBalance()>0?1:-1;
                }
            }
            else{
                return 1;
            }
        }
    }
}
class CustomerReport {
    public void generateReport() {
        Bank bank = Bank.getBank();
        Customer customer;
        for (int i = 1; i <= 3; i++) {
            System.out.print("CUSTOMERS REPORT");
            switch (i){
                case 1:bank.sortCustomers(new NameComp());
                System.out.println(" according to User Name:");
                break;
                case 2:bank.sortCustomers(new SavingComp());
                System.out.println(" according to Savings Account Balance:");
                break;
                case 3:bank.sortCustomers(new CheckingComp());
                System.out.println(" according to Checking Account Balance:");
                break;
            }
            System.out.println("=============================================");
            for (int cust_idx = 0; cust_idx < bank.getNumOfCustomers(); cust_idx++) {
                customer = bank.getCustomer(cust_idx);
                System.out.println();
                System.out.println("Customer: "
                        + "[" + customer.getFirstName() + " "
                        + customer.getLastName() + "]");
                for (int acct_idx = 0; acct_idx < customer.getNumOfAccounts(); acct_idx++) {
                    Account account = customer.getAccount(acct_idx);
                    String account_type = "";
                    if (account instanceof SavingsAccount) {
                        account_type = "Savings Account";
                    } else if (account instanceof CheckingAccount) {
                        account_type = "Checking Account";
                    } else {
                        account_type = "Unknown Account Type";
                    }
                    System.out.println("    " + account_type + ": current balance is $"
                            + account.getBalance());
                }
            }
        }
    }
}
class Customer {
    private String firstName;
    private String lastName;
    private List<Account> accounts;
    public Customer(String firstName, String lastName)
    {
        this.firstName = firstName;
        this.lastName = lastName;
        accounts=new ArrayList<>();
    }
    public String getFirstName()
    {
        return firstName;
    }
    public String getLastName()
    {
        return lastName;
    }
    public void addAccount(Account account) {
        accounts.add(account);
    }
    public Account getAccount(int index) {
        if (index < accounts.size()) {
            return accounts.get(index);
        } else {
            return null;
        }
    }
    public int getNumOfAccounts() {
        return accounts.size();
    }
    @Override
    public String toString() {
        return "[" + firstName + " " + lastName + "]";
    }
}
class Account {
    protected double balance;
    public Account(double balance) {
        this.balance = balance;
    }
    public double getBalance()
    {
        return balance;
    }
    public boolean deposit(double amount)
    {
        balance += amount;
        return true;
    }
    public void withdraw(double amount) throws OverdraftException{
        if (balance >= amount) {
            balance -= amount;
        }
        else{
            double deficit=amount-balance;
            throw new OverdraftException("Insufficient funds", deficit);
        }
    }
}
class SavingsAccount extends Account{
    private double interestRate;
    public SavingsAccount(double balance,double interest_rate) {
        super(balance);
        this.interestRate = interest_rate;
    }
}
class CheckingAccount extends Account {
    private double overdraftProtection=0;
    protected SavingsAccount protectedBy = null;
    public CheckingAccount(double balance) {
        super(balance);
    }
    public CheckingAccount(double balance, SavingsAccount savingsAccount) {
        super(balance);
        this.protectedBy = savingsAccount;
    }
    public CheckingAccount(double balance, double protect) {
        super(balance);
        overdraftProtection = protect;
    }
    @Override
    public void withdraw(double amount) throws OverdraftException{
        if (balance >= amount) {
            balance -= amount;
        } else if (overdraftProtection != 0) {
            if (overdraftProtection >= (amount - balance)) {
                overdraftProtection-=amount-balance;
                balance = 0;
            }
            else{
                double deficit=amount-balance-overdraftProtection;
                throw new OverdraftException("Insufficient funds", deficit);
            }
        } else {
            double deficit=amount-balance;
            throw new OverdraftException("No overdraft protection", deficit);
        }
    }
}
class OverdraftException extends Exception {
    private double deficit;
    public OverdraftException(String message, double deficit) {
        super(message);
        this.deficit = deficit;
    }
    public double getDeficit() {
        return deficit;
    }
}
